F N "main" 0 3 ""
D G "__PCM__" 0 15 ""5.093""
D G "__DEVICE__" 0 15 "1827"
D G "__DATE__" 0 15 ""20-Oct-22""
D G "__TIME__" 0 15 ""14:06:31""
D G "_UNICODE" 0 15 ""?""
D G "__EVAL" 0 15 ""?"" "Standard Header file for the PIC16F1827 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 39 ""
v L "value" 2 39 "int8" `55 
f B "set_tris_a" 2 39 "void(int8 value)" `54 
f N "set_tris_b" 2 40 ""
v L "value" 2 40 "int8" `57 
f B "set_tris_b" 2 40 "void(int8 value)" `56 
f N "get_tris_a" 2 41 ""
f B "get_tris_a" 2 41 "int8()" `58 
f N "get_tris_b" 2 42 ""
f B "get_tris_b" 2 42 "int8()" `59 
f N "output_a" 2 43 ""
v L "value" 2 43 "int8" `61 
f B "output_a" 2 43 "void(int8 value)" `60 
f N "output_b" 2 44 ""
v L "value" 2 44 "int8" `63 
f B "output_b" 2 44 "void(int8 value)" `62 
f N "input_a" 2 45 ""
f B "input_a" 2 45 "int8()" `64 
f N "input_b" 2 46 ""
f B "input_b" 2 46 "int8()" `65 
f N "input_change_a" 2 47 ""
f B "input_change_a" 2 47 "int8()" `66 
f N "input_change_b" 2 48 ""
f B "input_change_b" 2 48 "int8()" `67 
f N "port_a_pullups" 2 49 ""
v L "upmask" 2 49 "int8" `69 
f B "port_a_pullups" 2 49 "void(int8 upmask)" `68 
f N "port_b_pullups" 2 50 ""
v L "upmask" 2 50 "int8" `71 
f B "port_b_pullups" 2 50 "void(int8 upmask)" `70 
f N "input" 2 51 ""
v L "pin" 2 51 "int16" `73 
f B "input" 2 51 "int8(int16 pin)" `72 
f N "input_state" 2 52 ""
v L "pin" 2 52 "int16" `75 
f B "input_state" 2 52 "int8(int16 pin)" `74 
f N "output_low" 2 53 ""
v L "pin" 2 53 "int16" `77 
f B "output_low" 2 53 "void(int16 pin)" `76 
f N "output_high" 2 54 ""
v L "pin" 2 54 "int16" `79 
f B "output_high" 2 54 "void(int16 pin)" `78 
f N "output_toggle" 2 55 ""
v L "pin" 2 55 "int16" `81 
f B "output_toggle" 2 55 "void(int16 pin)" `80 
f N "output_bit" 2 56 ""
v L "pin" 2 56 "int16" `83 
v L "level" 2 56 "int8" `84 
f B "output_bit" 2 56 "void(int16 pin,int8 level)" `82 
f N "output_float" 2 57 ""
v L "pin" 2 57 "int16" `86 
f B "output_float" 2 57 "void(int16 pin)" `85 
f N "output_drive" 2 58 ""
v L "pin" 2 58 "int16" `88 
f B "output_drive" 2 58 "void(int16 pin)" `87  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 62 "96"
d G "PIN_A1" 2 63 "97"
d G "PIN_A2" 2 64 "98"
d G "PIN_A3" 2 65 "99"
d G "PIN_A4" 2 66 "100"
d G "PIN_A5" 2 67 "101"
d G "PIN_A6" 2 68 "102"
d G "PIN_A7" 2 69 "103"
d G "PIN_B0" 2 71 "104"
d G "PIN_B1" 2 72 "105"
d G "PIN_B2" 2 73 "106"
d G "PIN_B3" 2 74 "107"
d G "PIN_B4" 2 75 "108"
d G "PIN_B5" 2 76 "109"
d G "PIN_B6" 2 77 "110"
d G "PIN_B7" 2 78 "111"
d G "FALSE" 2 81 "0"
d G "TRUE" 2 82 "1"
d G "BYTE" 2 84 "int8"
d G "BOOLEAN" 2 85 "int1"
d G "getc" 2 87 "getch"
d G "fgetc" 2 88 "getch"
d G "getchar" 2 89 "getch"
d G "putc" 2 90 "putchar"
d G "fputc" 2 91 "putchar"
d G "fgets" 2 92 "gets"
d G "fputs" 2 93 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 98 ""
f B "restart_cause" 2 98 "int8()" `89 
f N "reset_cpu" 2 99 ""
f B "reset_cpu" 2 99 "void()" `90 
f N "sleep" 2 100 ""
f B "sleep" 2 100 "void()" `91  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 2 102 "0x3C"
d G "MCLR_FROM_POWER_UP" 2 103 "0x34"
d G "BROWNOUT_RESTART" 2 104 "0x3E"
d G "MCLR_FROM_SLEEP" 2 105 "0x27"
d G "WDT_TIMEOUT" 2 106 "0x1F"
d G "WDT_FROM_SLEEP" 2 107 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 2 108 "0x2F"
d G "MCLR_FROM_RUN" 2 109 "0x37"
d G "RESET_INSTRUCTION" 2 110 "0x3B"
d G "STACK_OVERFLOW" 2 111 "0xBF"
d G "STACK_UNDERFLOW" 2 112 "0x7F"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 119 ""
v L "mode" 2 119 "int8" `93 
f B "setup_timer_0" 2 119 "void(int8 mode)" `92 
f N "set_timer0" 2 120 ""
v L "value" 2 120 "int8" `95 
f B "set_timer0" 2 120 "void(int8 value)" `94 
f N "get_timer0" 2 121 ""
f B "get_timer0" 2 121 "int8()" `96 
f N "setup_counters" 2 122 ""
v L "mode" 2 122 "int8" `98 
v L "prescaler" 2 122 "int8" `99 
f B "setup_counters" 2 122 "void(int8 mode,int8 prescaler)" `97 
f N "set_rtcc" 2 123 ""
v L "value" 2 123 "int8" `101 
f B "set_rtcc" 2 123 "void(int8 value)" `100 
f N "get_rtcc" 2 124 ""
f B "get_rtcc" 2 124 "int8()" `102  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 126 "0"
d G "T0_EXT_L_TO_H" 2 127 "32"
d G "T0_EXT_H_TO_L" 2 128 "48"
d G "T0_DIV_1" 2 130 "8"
d G "T0_DIV_2" 2 131 "0"
d G "T0_DIV_4" 2 132 "1"
d G "T0_DIV_8" 2 133 "2"
d G "T0_DIV_16" 2 134 "3"
d G "T0_DIV_32" 2 135 "4"
d G "T0_DIV_64" 2 136 "5"
d G "T0_DIV_128" 2 137 "6"
d G "T0_DIV_256" 2 138 "7"
d G "T0_8_BIT" 2 141 "0"
d G "RTCC_INTERNAL" 2 145 "0"
d G "RTCC_EXT_L_TO_H" 2 146 "32"
d G "RTCC_EXT_H_TO_L" 2 147 "48"
d G "RTCC_DIV_1" 2 148 "8"
d G "RTCC_DIV_2" 2 149 "0"
d G "RTCC_DIV_4" 2 150 "1"
d G "RTCC_DIV_8" 2 151 "2"
d G "RTCC_DIV_16" 2 152 "3"
d G "RTCC_DIV_32" 2 153 "4"
d G "RTCC_DIV_64" 2 154 "5"
d G "RTCC_DIV_128" 2 155 "6"
d G "RTCC_DIV_256" 2 156 "7"
d G "RTCC_8_BIT" 2 157 "0"
c L "get_rtcc" 2 3 7 "FUNCTION"
f N "setup_wdt" 2 167 ""
v L "mode" 2 167 "int16" `104 
f B "setup_wdt" 2 167 "void(int16 mode)" `103 
f N "restart_wdt" 2 168 ""
f B "restart_wdt" 2 168 "void()" `105  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 170 "0x1000"
d G "WDT_OFF" 2 171 "0x2000"
d G "WDT_1MS" 2 173 "0x100"
d G "WDT_2MS" 2 174 "0x101"
d G "WDT_4MS" 2 175 "0x102"
d G "WDT_8MS" 2 176 "0x103"
d G "WDT_16MS" 2 177 "0x104"
d G "WDT_32MS" 2 178 "0x105"
d G "WDT_64MS" 2 179 "0x106"
d G "WDT_128MS" 2 180 "0x107"
d G "WDT_256MS" 2 181 "0x108"
d G "WDT_512MS" 2 182 "0x109"
d G "WDT_1S" 2 183 "0x10A"
d G "WDT_2S" 2 184 "0x10B"
d G "WDT_4S" 2 185 "0x10C"
d G "WDT_8S" 2 186 "0x10D"
d G "WDT_16S" 2 187 "0x10E"
d G "WDT_32S" 2 188 "0x10F"
d G "WDT_64S" 2 189 "0x110"
d G "WDT_128S" 2 190 "0x111"
d G "WDT_256S" 2 191 "0x112"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 196 ""
v L "mode" 2 196 "int16" `107 
f B "setup_timer_1" 2 196 "void(int16 mode)" `106 
f N "get_timer1" 2 197 ""
f B "get_timer1" 2 197 "int16()" `108 
f N "set_timer1" 2 198 ""
v L "value" 2 198 "int16" `110 
f B "set_timer1" 2 198 "void(int16 value)" `109  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 201 "0"
d G "T1_CAPSENSE" 2 202 "0xC5"
d G "T1_EXTERNAL" 2 203 "0x85"
d G "T1_EXTERNAL_SYNC" 2 204 "0x81"
d G "T1_FOSC" 2 205 "0x45"
d G "T1_INTERNAL" 2 206 "0x05"
d G "T1_ENABLE_T1OSC" 2 208 "0x08"
d G "T1_DIV_BY_1" 2 210 "0x00"
d G "T1_DIV_BY_2" 2 211 "0x10"
d G "T1_DIV_BY_4" 2 212 "0x20"
d G "T1_DIV_BY_8" 2 213 "0x30"
d G "T1_GATE" 2 215 "0x8000"
d G "T1_GATE_INVERTED" 2 216 "0xC000"
d G "T1_GATE_TOGGLE" 2 217 "0xA000"
d G "T1_GATE_SINGLE" 2 218 "0x9000"
d G "T1_GATE_TIMER0" 2 219 "0x8100"
d G "T1_GATE_COMP1" 2 220 "0x8200"
d G "T1_GATE_COMP2" 2 221 "0x8300"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 226 ""
v L "mode" 2 226 "int8" `112 
v L "period" 2 226 "int8" `113 
v L "postscale" 2 226 "int8" `114 
f B "setup_timer_2" 2 226 "void(int8 mode,int8 period,int8 postscale)" `111 
f N "get_timer2" 2 227 ""
f B "get_timer2" 2 227 "int8()" `115 
f N "set_timer2" 2 228 ""
v L "value" 2 228 "int8" `117 
f B "set_timer2" 2 228 "void(int8 value)" `116  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 230 "0"
d G "T2_DIV_BY_1" 2 231 "4"
d G "T2_DIV_BY_4" 2 232 "5"
d G "T2_DIV_BY_16" 2 233 "6"
d G "T2_DIV_BY_64" 2 234 "7"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_4" 2 239 ""
v L "mode" 2 239 "int16" `119 
v L "period" 2 239 "int8" `120 
v L "postscaler" 2 239 "int8" `121 
f B "setup_timer_4" 2 239 "void(int16 mode,int8 period,int8 postscaler)" `118 
f N "get_timer4" 2 240 ""
f B "get_timer4" 2 240 "int8()" `122 
f N "set_timer4" 2 241 ""
v L "value" 2 241 "int8" `124 
f B "set_timer4" 2 241 "void(int8 value)" `123  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 243 "0"
d G "T4_DIV_BY_1" 2 244 "4"
d G "T4_DIV_BY_4" 2 245 "5"
d G "T4_DIV_BY_16" 2 246 "6"
d G "T4_DIV_BY_64" 2 247 "7"
c L "set_timer4" 2 3 3 "FUNCTION"
f N "setup_timer_6" 2 252 ""
v L "mode" 2 252 "int16" `126 
v L "period" 2 252 "int8" `127 
v L "postscaler" 2 252 "int8" `128 
f B "setup_timer_6" 2 252 "void(int16 mode,int8 period,int8 postscaler)" `125 
f N "get_timer6" 2 253 ""
f B "get_timer6" 2 253 "int8()" `129 
f N "set_timer6" 2 254 ""
v L "value" 2 254 "int8" `131 
f B "set_timer6" 2 254 "void(int8 value)" `130  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 2 257 "0"
d G "T6_DIV_BY_1" 2 258 "4"
d G "T6_DIV_BY_4" 2 259 "5"
d G "T6_DIV_BY_16" 2 260 "6"
d G "T6_DIV_BY_64" 2 261 "7"
c L "set_timer6" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 267 ""
v L "mode" 2 267 "int32" `133 
f B "setup_ccp1" 2 267 "void(int32 mode)" `132 
f N "setup_ccp1" 2 268 ""
v L "mode" 2 268 "int32" `135 
v L "pwm" 2 268 "int8" `136 
f B "setup_ccp1" 2 268 "void(int32 mode,int8 pwm)" `134 
f N "set_pwm1_duty" 2 269 ""
v L "value" 2 269 "int8" `138 
f B "set_pwm1_duty" 2 269 "void(int8 value)" `137 
f N "set_pwm1_duty" 2 270 ""
v L "value" 2 270 "int16" `140 
f B "set_pwm1_duty" 2 270 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 272 "0"
d G "CCP_CAPTURE_FE" 2 273 "0x04"
d G "CCP_CAPTURE_RE" 2 274 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 275 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 276 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 277 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 278 "0x09"
d G "CCP_COMPARE_INT" 2 279 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 2 280 "0x0B"
d G "CCP_PWM" 2 281 "0x0C"
d G "CCP_PWM_PLUS_1" 2 282 "0x1c"
d G "CCP_PWM_PLUS_2" 2 283 "0x2c"
d G "CCP_PWM_PLUS_3" 2 284 "0x3c"
d G "CCP_PWM_H_H" 2 291 "0x0c"
d G "CCP_PWM_H_L" 2 292 "0x0d"
d G "CCP_PWM_L_H" 2 293 "0x0e"
d G "CCP_PWM_L_L" 2 294 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 296 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 297 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 298 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 300 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 301 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 302 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 303 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 304 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 305 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 306 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 308 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 309 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 310 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 312 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 313 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 314 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 316 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 318 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 319 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 320 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 321 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 322 "0x10000000"
d G "CCP_TIMER2" 2 325 "0x0000"
d G "CCP_TIMER4" 2 326 "0x1000"
d G "CCP_TIMER6" 2 327 "0x2000"
d G "CCP1_B3" 2 329 "0x00"
d G "CCP1_B0" 2 330 "0x100"
d G "CCP2_B6" 2 331 "0x00"
d G "CCP2_A7" 2 332 "0x100"
d G "CCP_P1A_B3" 2 333 "0x000"
d G "CCP_P1A_B0" 2 334 "0x100"
d G "CCP_P1C_B6" 2 335 "0x000"
d G "CCP_P1C_A7" 2 336 "0x200"
d G "CCP_P1D_B7" 2 337 "0x000"
d G "CCP_P1D_A6" 2 338 "0x400"
d G "CCP_P2B_B7" 2 339 "0x000"
d G "CCP_P2B_A6" 2 340 "0x200"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 343 ""
v L "mode" 2 343 "int32" `145 
f B "setup_ccp2" 2 343 "void(int32 mode)" `144 
f N "setup_ccp2" 2 344 ""
v L "mode" 2 344 "int32" `147 
v L "pwm" 2 344 "int8" `148 
f B "setup_ccp2" 2 344 "void(int32 mode,int8 pwm)" `146 
f N "set_pwm2_duty" 2 345 ""
v L "value" 2 345 "int8" `150 
f B "set_pwm2_duty" 2 345 "void(int8 value)" `149 
f N "set_pwm2_duty" 2 346 ""
v L "value" 2 346 "int16" `152 
f B "set_pwm2_duty" 2 346 "void(int16 value)" `151 
c L "set_pwm2_duty" 2 3 1 "FUNCTION"
f N "setup_ccp3" 2 352 ""
v L "mode" 2 352 "int32" `157 
f B "setup_ccp3" 2 352 "void(int32 mode)" `156 
f N "setup_ccp3" 2 353 ""
v L "mode" 2 353 "int32" `159 
v L "pwm" 2 353 "int8" `160 
f B "setup_ccp3" 2 353 "void(int32 mode,int8 pwm)" `158 
f N "set_pwm3_duty" 2 354 ""
v L "value" 2 354 "int8" `162 
f B "set_pwm3_duty" 2 354 "void(int8 value)" `161 
f N "set_pwm3_duty" 2 355 ""
v L "value" 2 355 "int16" `164 
f B "set_pwm3_duty" 2 355 "void(int16 value)" `163 
c L "set_pwm3_duty" 2 3 1 "FUNCTION"
f N "setup_ccp4" 2 361 ""
v L "mode" 2 361 "int32" `169 
f B "setup_ccp4" 2 361 "void(int32 mode)" `168 
f N "setup_ccp4" 2 362 ""
v L "mode" 2 362 "int32" `171 
v L "pwm" 2 362 "int8" `172 
f B "setup_ccp4" 2 362 "void(int32 mode,int8 pwm)" `170 
f N "set_pwm4_duty" 2 363 ""
v L "value" 2 363 "int8" `174 
f B "set_pwm4_duty" 2 363 "void(int8 value)" `173 
f N "set_pwm4_duty" 2 364 ""
v L "value" 2 364 "int16" `176 
f B "set_pwm4_duty" 2 364 "void(int16 value)" `175 
c L "set_pwm4_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 372 ""
v L "mode" 2 372 "int32" `181 
f B "setup_spi" 2 372 "void(int32 mode)" `180 
f N "spi_write" 2 373 ""
v L "value" 2 373 "int8" `183 
f B "spi_write" 2 373 "void(int8 value)" `182 
f N "spi_write" 2 374 ""
v L "wait" 2 374 "int8" `185 
v L "value" 2 374 "int8" `186 
f B "spi_write" 2 374 "void(int8 wait,int8 value)" `184 
f N "spi_read" 2 375 ""
f B "spi_read" 2 375 "int8()" `187 
f N "spi_read" 2 376 ""
v L "value" 2 376 "int8" `189 
f B "spi_read" 2 376 "int8(int8 value)" `188 
f N "spi_data_is_in" 2 377 ""
f B "spi_data_is_in" 2 377 "int8()" `190 
f N "setup_spi2" 2 378 ""
v L "mode" 2 378 "int32" `192 
f B "setup_spi2" 2 378 "void(int32 mode)" `191 
f N "spi_write2" 2 379 ""
v L "value" 2 379 "int8" `194 
f B "spi_write2" 2 379 "void(int8 value)" `193 
f N "spi_read2" 2 380 ""
f B "spi_read2" 2 380 "int8()" `195 
f N "spi_read2" 2 381 ""
v L "value" 2 381 "int8" `197 
f B "spi_read2" 2 381 "int8(int8 value)" `196 
f N "spi_data_is_in2" 2 382 ""
f B "spi_data_is_in2" 2 382 "int8()" `198  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 384 "0x00"
d G "SPI_MASTER" 2 385 "0x20"
d G "SPI_SLAVE" 2 386 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 387 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 388 "0x00"
d G "SPI_CLK_DIV_4" 2 389 "0x00"
d G "SPI_CLK_DIV_16" 2 390 "0x01"
d G "SPI_CLK_DIV_64" 2 391 "0x02"
d G "SPI_CLK_T2" 2 392 "0x03"
d G "SPI_SS_DISABLED" 2 393 "0x01"
d G "SPI_SS_B5" 2 395 "0x000"
d G "SPI_SS_A5" 2 396 "0x10000"
d G "SPI_DO_B2" 2 397 "0x000"
d G "SPI_DO_A6" 2 398 "0x20000"
d G "SPI_XMIT_L_TO_H" 2 400 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 401 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 403 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 404 "0x8000"
d G "SPI_L_TO_H" 2 407 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 408 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 2 "FUNCTION"
f N "setup_uart" 2 412 ""
v L "baud" 2 412 "int32" `200 
f B "setup_uart" 2 412 "void(int32 baud)" `199 
f N "setup_uart" 2 413 ""
v L "baud" 2 413 "int32" `202 
v L "stream" 2 413 "int8" `203 
f B "setup_uart" 2 413 "void(int32 baud,int8 stream)" `201 
f N "setup_uart" 2 414 ""
v L "baud" 2 414 "int32" `205 
v L "stream" 2 414 "int8" `206 
v L "clock" 2 414 "int32" `207 
f B "setup_uart" 2 414 "void(int32 baud,int8 stream,int32 clock)" `204 
f N "set_uart_speed" 2 415 ""
v L "baud" 2 415 "int32" `209 
f B "set_uart_speed" 2 415 "void(int32 baud)" `208 
f N "set_uart_speed" 2 416 ""
v L "baud" 2 416 "int32" `211 
v L "stream" 2 416 "int8" `212 
f B "set_uart_speed" 2 416 "void(int32 baud,int8 stream)" `210 
f N "set_uart_speed" 2 417 ""
v L "baud" 2 417 "int32" `214 
v L "stream" 2 417 "int8" `215 
v L "clock" 2 417 "int32" `216 
f B "set_uart_speed" 2 417 "void(int32 baud,int8 stream,int32 clock)" `213  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 421 "2"
d G "UART_DATA" 2 422 "4"
d G "UART_AUTODETECT" 2 423 "8"
d G "UART_AUTODETECT_NOWAIT" 2 424 "9"
d G "UART_WAKEUP_ON_RDA" 2 425 "10"
d G "UART_SEND_BREAK" 2 426 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 431 ""
v L "mode" 2 431 "int32" `218 
f B "setup_comparator" 2 431 "void(int32 mode)" `217  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 434 "0x00"
d G "CP1_A0_A3" 2 437 "0x8000"
d G "CP1_A1_A3" 2 438 "0x8001"
d G "CP1_A2_A3" 2 439 "0x8002"
d G "CP1_A3_A3" 2 440 "0x8003"
d G "CP1_A0_DAC" 2 441 "0x8010"
d G "CP1_A1_DAC" 2 442 "0x8011"
d G "CP1_A2_DAC" 2 443 "0x8012"
d G "CP1_A3_DAC" 2 444 "0x8013"
d G "CP1_A0_FVR" 2 445 "0x8020"
d G "CP1_A1_FVR" 2 446 "0x8021"
d G "CP1_A2_FVR" 2 447 "0x8022"
d G "CP1_A3_FVR" 2 448 "0x8023"
d G "CP1_A0_A2" 2 449 "0x8030"
d G "CP1_A1_A2" 2 450 "0x8031"
d G "CP1_A2_A2" 2 451 "0x8032"
d G "CP1_A3_A2" 2 452 "0x8033"
d G "CP1_INT_H2L" 2 454 "0x0040"
d G "CP1_INT_L2H" 2 455 "0x0080"
d G "CP1_OUT_ON_A3" 2 456 "0x2000"
d G "CP1_INVERT" 2 457 "0x1000"
d G "CP1_FAST" 2 458 "0x0400"
d G "CP1_HYST" 2 459 "0x0200"
d G "CP1_SYNC" 2 460 "0x0100"
d G "CP2_A0_A2" 2 463 "0x80000000"
d G "CP2_A1_A2" 2 464 "0x80010000"
d G "CP2_A2_A2" 2 465 "0x80020000"
d G "CP2_A3_A2" 2 466 "0x80030000"
d G "CP2_A0_DAC" 2 467 "0x80100000"
d G "CP2_A1_DAC" 2 468 "0x80110000"
d G "CP2_A2_DAC" 2 469 "0x80120000"
d G "CP2_A3_DAC" 2 470 "0x80130000"
d G "CP2_A0_FVR" 2 471 "0x80200000"
d G "CP2_A1_FVR" 2 472 "0x80210000"
d G "CP2_A2_FVR" 2 473 "0x80220000"
d G "CP2_A3_FVR" 2 474 "0x80230000"
d G "CP2_A0_VSS" 2 475 "0x80300000"
d G "CP2_A1_VSS" 2 476 "0x80310000"
d G "CP2_A2_VSS" 2 477 "0x80320000"
d G "CP2_A3_VSS" 2 478 "0x80330000"
d G "CP2_INT_H2L" 2 480 "0x00400000"
d G "CP2_INT_L2H" 2 481 "0x00800000"
d G "CP2_OUT_ON_A4" 2 482 "0x20000000"
d G "CP2_INVERT" 2 483 "0x10000000"
d G "CP2_FAST" 2 484 "0x04000000"
d G "CP2_HYST" 2 485 "0x02000000"
d G "CP2_SYNC" 2 486 "0x01000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 493 ""
v L "mode" 2 493 "int8" `222 
f B "setup_vref" 2 493 "void(int8 mode)" `221  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 495 "0"
d G "VREF_ON" 2 496 "0x80"
d G "VREF_ADC_OFF" 2 498 "0"
d G "VREF_ADC_1v024" 2 499 "0x81"
d G "VREF_ADC_2v048" 2 500 "0x82"
d G "VREF_ADC_4v096" 2 501 "0x83"
d G "VREF_COMP_DAC_OFF" 2 503 "0"
d G "VREF_COMP_DAC_1v024" 2 504 "0x84"
d G "VREF_COMP_DAC_2v048" 2 505 "0x88"
d G "VREF_COMP_DAC_4v096" 2 506 "0x8C"
d G "TEMPERATURE_INDICATOR_DISABLED" 2 508 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 2 509 "0x20"
d G "TEMPERATURE_RANGE_LOW" 2 510 "0"
d G "TEMPERATURE_RANGE_HIGH" 2 511 "0x10"
c L "setup_vref" 2 3 3 "FUNCTION"
f N "setup_dac" 2 516 ""
v L "mode" 2 516 "int8" `224 
f B "setup_dac" 2 516 "void(int8 mode)" `223 
f N "dac_write" 2 517 ""
v L "value" 2 517 "int8" `226 
f B "dac_write" 2 517 "void(int8 value)" `225  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 519 "0"
d G "DAC_VSS_VDD" 2 520 "0x80"
d G "DAC_VREF_VDD" 2 521 "0x81"
d G "DAC_VSS_VREF" 2 522 "0x84"
d G "DAC_VREF_VREF" 2 523 "0x85"
d G "DAC_VSS_FVR" 2 524 "0x88"
d G "DAC_VREF_FVR" 2 525 "0x89"
d G "DAC_OUTPUT" 2 527 "0x20"
d G "DAC_LVP_POS" 2 528 "0x40"
d G "DAC_LVP_NEG" 2 529 "0"
c L "dac_write" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 534 ""
v L "mode" 2 534 "int8" `228 
f B "setup_oscillator" 2 534 "void(int8 mode)" `227  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 537 "0"
d G "OSC_31250" 2 538 " (2*8)"
d G "OSC_62KHZ" 2 539 " (4*8)"
d G "OSC_125KHZ" 2 540 " (5*8)"
d G "OSC_250KHZ" 2 541 " (6*8)"
d G "OSC_500KHZ" 2 542 " (7*8)"
d G "OSC_1MHZ" 2 543 " (11*8)"
d G "OSC_2MHZ" 2 544 " (12*8)"
d G "OSC_4MHZ" 2 545 " (13*8)"
d G "OSC_8MHZ" 2 546 " (14*8)"
d G "OSC_16MHZ" 2 547 " (15*8)"
d G "OSC_TIMER1" 2 549 "1"
d G "OSC_INTRC" 2 550 "2"
d G "OSC_NORMAL" 2 551 "0"
d G "OSC_PLL_ON" 2 553 "0x80"
d G "OSC_PLL_OFF" 2 554 "0"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 561 ""
v L "mode" 2 561 "int16" `230 
f B "setup_adc" 2 561 "void(int16 mode)" `229 
f N "read_adc" 2 562 ""
f B "read_adc" 2 562 "int8()" `231 
f N "read_adc" 2 563 ""
v L "mode" 2 563 "int8" `233 
f B "read_adc" 2 563 "int8(int8 mode)" `232 
f N "read_adc" 2 564 ""
f G "read_adc" 2 564 "int16()" `234 
f N "read_adc" 2 565 ""
v L "mode" 2 565 "int8" `235 
f G "read_adc" 2 565 "int16(int8 mode,int32 pins)" `234 
f N "adc_done" 2 566 ""
f B "adc_done" 2 566 "int8(int8 mode,int32 pins)" `234  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 568 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 569 "0x100"
d G "ADC_CLOCK_DIV_4" 2 570 "0x40"
d G "ADC_CLOCK_DIV_8" 2 571 "0x10"
d G "ADC_CLOCK_DIV_32" 2 572 "0x20"
d G "ADC_CLOCK_DIV_16" 2 573 "0x50"
d G "ADC_CLOCK_DIV_64" 2 574 "0x60"
d G "ADC_CLOCK_INTERNAL" 2 575 "0x30" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 578 ""
v L "pins" 2 578 "int32" `236 
f B "setup_adc_ports" 2 578 "void(int32 pins)" `235 
f N "setup_adc_ports" 2 579 ""
v L "pins" 2 579 "int32" `238 
v L "reference" 2 579 "int32" `239 
f B "setup_adc_ports" 2 579 "void(int32 pins,int32 reference)" `237 
f N "set_analog_pins" 2 580 ""
v L "pin" 2 580 "int8" `241 
f B "set_analog_pins" 2 580 "void(int8 pin,*int8 _VA_LIST)" `240 
f N "setup_adc_reference" 2 581 ""
v L "reference" 2 581 "int32" `244 
f B "setup_adc_reference" 2 581 "void(int32 reference)" `243 
f N "set_adc_channel" 2 582 ""
v L "channel" 2 582 "int8" `246 
f B "set_adc_channel" 2 582 "void(int8 channel)" `245  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 586 "0x000100" "| A0"
d G "sAN1" 2 587 "0x000200" "| A1"
d G "sAN2" 2 588 "0x000400" "| A2"
d G "sAN3" 2 589 "0x000800" "| A3"
d G "sAN4" 2 590 "0x001000" "| A4"
d G "sAN5" 2 591 "0x000040" "| B6"
d G "sAN6" 2 592 "0x000080" "| B7"
d G "sAN7" 2 593 "0x000020" "| B5"
d G "sAN8" 2 594 "0x000010" "| B4"
d G "sAN9" 2 595 "0x000008" "| B3"
d G "sAN10" 2 596 "0x000004" "| B2"
d G "sAN11" 2 597 "0x000002" "| B1"
d G "NO_ANALOGS" 2 598 "0" "None"
d G "ALL_ANALOG" 2 599 "0x001FFE" "A0 A1 A2 A3 A4 B6 B7 B5 B4 B3 B2 B1"
d G "VSS_VDD" 2 602 "0x000000" "| Range 0-Vdd"
d G "VSS_VREF" 2 603 "0x020000" "| Range 0-VrefH"
d G "VSS_FVR" 2 604 "0x030000" "| Range 0-Fixed Voltage Reference"
d G "VREF_VDD" 2 605 "0x040000" "| Range VrefL-Vdd"
d G "VREF_VREF" 2 606 "0x060000" "| Range VrefL-VrefH"
d G "VREF_FVR" 2 607 "0x070000" "| Range VrefL-Fixed Voltage Reference"
d G "TEMPERATURE_INDICATOR" 2 611 "0x1D"
d G "DAC_CHANNEL" 2 612 "0x1E"
d G "FVR_CHANNEL" 2 613 "0x1F"
d G "ADC_START_AND_READ" 2 616 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 617 "1"
d G "ADC_READ_ONLY" 2 618 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 624 ""
v L "x" 2 624 "sint8" `248 
f B "abs" 2 624 "sint8(sint8 x)" `247 
f N "abs" 2 625 ""
v L "x" 2 625 "sint16" `250 
f B "abs" 2 625 "sint16(sint16 x)" `249 
f N "abs" 2 626 ""
v L "x" 2 626 "sint32" `252 
f B "abs" 2 626 "sint32(sint32 x)" `251 
f N "abs" 2 627 ""
v L "x" 2 627 "float" `254 
f B "abs" 2 627 "float(float x)" `253 
f N "_mul" 2 628 ""
v L "??65535" 2 628 "int8" `256 
v L "??65535" 2 628 "int8" `257 
f B "_mul" 2 628 "int16(int8 ,int8 )" `255 
f N "_mul" 2 629 ""
v L "??65535" 2 629 "sint8" `259 
v L "??65535" 2 629 "sint8" `260 
f B "_mul" 2 629 "sint16(sint8 ,sint8 )" `258 
f N "_mul" 2 630 ""
v L "??65535" 2 630 "int16" `262 
v L "??65535" 2 630 "int16" `263 
f B "_mul" 2 630 "int32(int16 ,int16 )" `261 
f N "_mul" 2 631 ""
v L "??65535" 2 631 "sint16" `265 
v L "??65535" 2 631 "sint16" `266 
f B "_mul" 2 631 "sint32(sint16 ,sint16 )" `264  "Memory Manipulation Prototypes:"
f N "read_bank" 2 634 ""
v L "bank" 2 634 "int8" `268 
v L "offset" 2 634 "int8" `269 
f B "read_bank" 2 634 "int8(int8 bank,int8 offset)" `267 
f N "write_bank" 2 635 ""
v L "bank" 2 635 "int8" `271 
v L "offset" 2 635 "int8" `272 
v L "value" 2 635 "int8" `273 
f B "write_bank" 2 635 "void(int8 bank,int8 offset,int8 value)" `270 
f N "strcpy" 2 636 ""
v L "dest" 2 636 "*int8" `275 
v L "src" 2 636 "*int8" `276 
f B "strcpy" 2 636 "void(*int8 dest,*int8 src)" `274 
f N "memset" 2 637 ""
v L "destination" 2 637 "*int8" `278 
v L "value" 2 637 "int8" `279 
v L "num" 2 637 "int16" `280 
f B "memset" 2 637 "void(*int8 destination,int8 value,int16 num)" `277 
f N "memcpy" 2 638 ""
v L "destination" 2 638 "*int8" `282 
v L "source" 2 638 "*int8" `283 
v L "num" 2 638 "int16" `284 
f B "memcpy" 2 638 "void(*int8 destination,*int8 source,int16 num)" `281  "String Prototypes:"
f N "toupper" 2 641 ""
v L "cvalue" 2 641 "int8" `286 
f B "toupper" 2 641 "int8(int8 cvalue)" `285 
f N "tolower" 2 642 ""
v L "cvalue" 2 642 "int8" `288 
f B "tolower" 2 642 "int8(int8 cvalue)" `287 
f N "sprintf" 2 643 ""
v L "string" 2 643 "*int8" `290 
v L "cstring" 2 643 "*int8" `291 
f B "sprintf" 2 643 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `289  "Data Manipulators Prototypes:"
f N "shift_left" 2 646 ""
v L "address" 2 646 "*int8" `294 
v L "bytes" 2 646 "int8" `295 
v L "value" 2 646 "int8" `296 
f B "shift_left" 2 646 "int8(*int8 address,int8 bytes,int8 value)" `293 
f N "shift_right" 2 647 ""
v L "address" 2 647 "*int8" `298 
v L "bytes" 2 647 "int8" `299 
v L "value" 2 647 "int8" `300 
f B "shift_right" 2 647 "int8(*int8 address,int8 bytes,int8 value)" `297 
f N "rotate_left" 2 648 ""
v L "address" 2 648 "*int8" `302 
v L "bytes" 2 648 "int8" `303 
f B "rotate_left" 2 648 "void(*int8 address,int8 bytes)" `301 
f N "rotate_right" 2 649 ""
v L "address" 2 649 "*int8" `305 
v L "bytes" 2 649 "int8" `306 
f B "rotate_right" 2 649 "void(*int8 address,int8 bytes)" `304 
f N "swap" 2 650 ""
v L "value" 2 650 "int8" `308 
f B "swap" 2 650 "void(int8 value)" `307 
f N "make8" 2 651 ""
v L "var" 2 651 "int16" `310 
v L "offset" 2 651 "int8" `311 
f B "make8" 2 651 "int8(int16 var,int8 offset)" `309 
f N "make8" 2 652 ""
v L "var" 2 652 "int32" `313 
v L "offset" 2 652 "int8" `314 
f B "make8" 2 652 "int8(int32 var,int8 offset)" `312 
f N "make16" 2 653 ""
v L "varhigh" 2 653 "int8" `316 
v L "varlow" 2 653 "int8" `317 
f B "make16" 2 653 "int16(int8 varhigh,int8 varlow)" `315 
f N "make32" 2 654 ""
v L "var1" 2 654 "int16" `319 
f B "make32" 2 654 "int32(int16 var1)" `318 
f N "make32" 2 655 ""
v L "var1" 2 655 "int16" `321 
v L "var2" 2 655 "int16" `322 
f B "make32" 2 655 "int32(int16 var1,int16 var2)" `320 
f N "make32" 2 656 ""
v L "var1" 2 656 "int16" `324 
v L "var2" 2 656 "int8" `325 
f B "make32" 2 656 "int32(int16 var1,int8 var2)" `323 
f N "make32" 2 657 ""
v L "var1" 2 657 "int16" `327 
v L "var2" 2 657 "int8" `328 
v L "var3" 2 657 "int8" `329 
f B "make32" 2 657 "int32(int16 var1,int8 var2,int8 var3)" `326 
f N "make32" 2 658 ""
v L "var1" 2 658 "int8" `331 
f B "make32" 2 658 "int32(int8 var1)" `330 
f N "make32" 2 659 ""
v L "var1" 2 659 "int8" `333 
v L "var2" 2 659 "int8" `334 
f B "make32" 2 659 "int32(int8 var1,int8 var2)" `332 
f N "make32" 2 660 ""
v L "var1" 2 660 "int8" `336 
v L "var2" 2 660 "int8" `337 
v L "var3" 2 660 "int8" `338 
f B "make32" 2 660 "int32(int8 var1,int8 var2,int8 var3)" `335 
f N "make32" 2 661 ""
v L "var1" 2 661 "int8" `340 
v L "var2" 2 661 "int8" `341 
v L "var3" 2 661 "int8" `342 
v L "var4" 2 661 "int8" `343 
f B "make32" 2 661 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `339 
f N "make32" 2 662 ""
v L "var1" 2 662 "int8" `345 
v L "var2" 2 662 "int16" `346 
f B "make32" 2 662 "int32(int8 var1,int16 var2)" `344 
f N "make32" 2 663 ""
v L "var1" 2 663 "int8" `348 
v L "var2" 2 663 "int16" `349 
v L "var3" 2 663 "int8" `350 
f B "make32" 2 663 "int32(int8 var1,int16 var2,int8 var3)" `347 
f N "make32" 2 664 ""
v L "var1" 2 664 "int8" `352 
v L "var2" 2 664 "int8" `353 
v L "var3" 2 664 "int16" `354 
f B "make32" 2 664 "int32(int8 var1,int8 var2,int16 var3)" `351 
f N "bit_set" 2 665 ""
v L "var" 2 665 "int8" `356 
v L "bit" 2 665 "int8" `357 
f B "bit_set" 2 665 "void(int8 var,int8 bit)" `355 
f N "bit_set" 2 666 ""
v L "var" 2 666 "int16" `359 
v L "bit" 2 666 "int8" `360 
f B "bit_set" 2 666 "void(int16 var,int8 bit)" `358 
f N "bit_set" 2 667 ""
v L "var" 2 667 "int32" `362 
v L "bit" 2 667 "int8" `363 
f B "bit_set" 2 667 "void(int32 var,int8 bit)" `361 
f N "bit_clear" 2 668 ""
v L "var" 2 668 "int8" `365 
v L "bit" 2 668 "int8" `366 
f B "bit_clear" 2 668 "void(int8 var,int8 bit)" `364 
f N "bit_clear" 2 669 ""
v L "var" 2 669 "int16" `368 
v L "bit" 2 669 "int8" `369 
f B "bit_clear" 2 669 "void(int16 var,int8 bit)" `367 
f N "bit_clear" 2 670 ""
v L "var" 2 670 "int32" `371 
v L "bit" 2 670 "int8" `372 
f B "bit_clear" 2 670 "void(int32 var,int8 bit)" `370 
f N "bit_test" 2 671 ""
v L "var" 2 671 "int8" `374 
v L "bit" 2 671 "int8" `375 
f B "bit_test" 2 671 "int8(int8 var,int8 bit)" `373 
f N "bit_test" 2 672 ""
v L "var" 2 672 "int16" `377 
v L "bit" 2 672 "int8" `378 
f B "bit_test" 2 672 "int8(int16 var,int8 bit)" `376 
f N "bit_test" 2 673 ""
v L "var" 2 673 "int32" `380 
v L "bit" 2 673 "int8" `381 
f B "bit_test" 2 673 "int8(int32 var,int8 bit)" `379  "#use delay() Prototypes:"
f N "delay_cycles" 2 676 ""
v L "count" 2 676 "int8" `383 
f B "delay_cycles" 2 676 "void(int8 count)" `382 
f N "delay_ms" 2 677 ""
v L "time" 2 677 "int16" `385 
f B "delay_ms" 2 677 "void(int16 time)" `384 
f N "delay_us" 2 678 ""
v L "time" 2 678 "int16" `387 
f B "delay_us" 2 678 "void(int16 time)" `386  "#use rs232() Prototypes:"
f N "putchar" 2 681 ""
v L "cdata" 2 681 "int8" `389 
f B "putchar" 2 681 "void(int8 cdata)" `388 
f N "putchar" 2 682 ""
v L "cdata" 2 682 "int8" `391 
v L "stream" 2 682 "int8" `392 
f B "putchar" 2 682 "void(int8 cdata,int8 stream)" `390 
f N "puts" 2 683 ""
v L "string" 2 683 "*int8" `394 
f B "puts" 2 683 "void(*int8 string)" `393 
f N "puts" 2 684 ""
v L "string" 2 684 "*int8" `396 
v L "stream" 2 684 "int8" `397 
f B "puts" 2 684 "void(*int8 string,int8 stream)" `395 
f N "getch" 2 685 ""
f B "getch" 2 685 "int8()" `398 
f N "getch" 2 686 ""
v L "stream" 2 686 "int8" `400 
f B "getch" 2 686 "int8(int8 stream)" `399 
f N "gets" 2 687 ""
v L "string" 2 687 "*int8" `402 
f B "gets" 2 687 "void(*int8 string)" `401 
f N "gets" 2 688 ""
v L "string" 2 688 "*int8" `404 
v L "stream" 2 688 "int8" `405 
f B "gets" 2 688 "void(*int8 string,int8 stream)" `403 
f N "kbhit" 2 689 ""
f B "kbhit" 2 689 "int8()" `406 
f N "kbhit" 2 690 ""
v L "stream" 2 690 "int8" `408 
f B "kbhit" 2 690 "int8(int8 stream)" `407 
f N "printf" 2 691 ""
v L "string" 2 691 "*int8" `410 
f B "printf" 2 691 "void(*int8 string,*int8 _VA_LIST)" `409 
f N "fprintf" 2 692 ""
v L "stream" 2 692 "int8" `413 
v L "string" 2 692 "*int8" `414 
f B "fprintf" 2 692 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `412 
f N "putc_send" 2 693 ""
f B "putc_send" 2 693 "void()" `416 
f N "fputc_send" 2 694 ""
v L "stream" 2 694 "int8" `418 
f B "fputc_send" 2 694 "void(int8 stream)" `417 
f N "rcv_buffer_full" 2 695 ""
f B "rcv_buffer_full" 2 695 "int8()" `419 
f N "rcv_buffer_full" 2 696 ""
v L "stream" 2 696 "int8" `421 
f B "rcv_buffer_full" 2 696 "int8(int8 stream)" `420 
f N "rcv_buffer_bytes" 2 697 ""
f B "rcv_buffer_bytes" 2 697 "int16()" `422 
f N "rcv_buffer_bytes" 2 698 ""
v L "stream" 2 698 "int8" `424 
f B "rcv_buffer_bytes" 2 698 "int16(int8 stream)" `423 
f N "tx_buffer_full" 2 699 ""
f B "tx_buffer_full" 2 699 "int8()" `425 
f N "tx_buffer_full" 2 700 ""
v L "stream" 2 700 "int8" `427 
f B "tx_buffer_full" 2 700 "int8(int8 stream)" `426 
f N "tx_buffer_bytes" 2 701 ""
f B "tx_buffer_bytes" 2 701 "int16()" `428 
f N "tx_buffer_bytes" 2 702 ""
v L "stream" 2 702 "int8" `430 
f B "tx_buffer_bytes" 2 702 "int16(int8 stream)" `429  "#use i2c() Prototypes:"
f N "i2c_read" 2 705 ""
f B "i2c_read" 2 705 "int8()" `431 
f N "i2c_read" 2 706 ""
v L "ack" 2 706 "int8" `433 
f B "i2c_read" 2 706 "int8(int8 ack)" `432 
f N "i2c_read" 2 707 ""
v L "stream" 2 707 "int8" `435 
v L "ack" 2 707 "int8" `436 
f B "i2c_read" 2 707 "int8(int8 stream,int8 ack)" `434 
f N "i2c_write" 2 708 ""
v L "data" 2 708 "int8" `438 
f B "i2c_write" 2 708 "int8(int8 data)" `437 
f N "i2c_write" 2 709 ""
v L "stream" 2 709 "int8" `440 
v L "data" 2 709 "int8" `441 
f B "i2c_write" 2 709 "int8(int8 stream,int8 data)" `439 
f N "i2c_start" 2 710 ""
f B "i2c_start" 2 710 "void()" `442 
f N "i2c_start" 2 711 ""
v L "stream" 2 711 "int8" `444 
f B "i2c_start" 2 711 "void(int8 stream)" `443 
f N "i2c_start" 2 712 ""
v L "stream" 2 712 "int8" `446 
v L "restart" 2 712 "int8" `447 
f B "i2c_start" 2 712 "void(int8 stream,int8 restart)" `445 
f N "i2c_stop" 2 713 ""
f B "i2c_stop" 2 713 "void()" `448 
f N "i2c_stop" 2 714 ""
v L "stream" 2 714 "int8" `450 
f B "i2c_stop" 2 714 "void(int8 stream)" `449 
f N "i2c_isr_state" 2 715 ""
f B "i2c_isr_state" 2 715 "int8()" `451 
f N "i2c_slaveaddr" 2 716 ""
v L "addr" 2 716 "int8" `453 
f B "i2c_slaveaddr" 2 716 "void(int8 addr)" `452 
f N "i2c_slaveaddr" 2 717 ""
v L "stream" 2 717 "int8" `455 
v L "addr" 2 717 "int8" `456 
f B "i2c_slaveaddr" 2 717 "void(int8 stream,int8 addr)" `454 
f N "i2c_poll" 2 718 ""
f B "i2c_poll" 2 718 "int8()" `457 
f N "i2c_poll" 2 719 ""
v L "stream" 2 719 "int8" `459 
f B "i2c_poll" 2 719 "int8(int8 stream)" `458 
f N "i2c_init" 2 720 ""
v L "baud" 2 720 "int32" `461 
f B "i2c_init" 2 720 "void(int32 baud)" `460 
f N "i2c_init" 2 721 ""
v L "stream" 2 721 "int8" `463 
v L "baud" 2 721 "int32" `464 
f B "i2c_init" 2 721 "void(int8 stream,int32 baud)" `462 
f N "i2c_transfer" 2 722 ""
v L "address" 2 722 "int8" `466 
v L "wData" 2 722 "*int8" `467 
v L "wCount" 2 722 "int8" `468 
f B "i2c_transfer" 2 722 "int8(int8 address,*int8 wData,int8 wCount)" `465 
f N "i2c_transfer" 2 723 ""
v L "address" 2 723 "int8" `470 
v L "wData" 2 723 "*int8" `471 
v L "wCount" 2 723 "int8" `472 
v L "rData" 2 723 "*int8" `473 
v L "rCount" 2 723 "*int8" `474 
f B "i2c_transfer" 2 723 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `469 
f N "i2c_transfer" 2 724 ""
v L "stream" 2 724 "int8" `476 
v L "address" 2 724 "int8" `477 
v L "wData" 2 724 "*int8" `478 
v L "wCount" 2 724 "int8" `479 
f B "i2c_transfer" 2 724 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `475 
f N "i2c_transfer" 2 725 ""
v L "stream" 2 725 "int8" `481 
v L "address" 2 725 "int8" `482 
v L "wData" 2 725 "*int8" `483 
v L "wCount" 2 725 "int8" `484 
v L "rData" 2 725 "*int8" `485 
v L "rCount" 2 725 "*int8" `486 
f B "i2c_transfer" 2 725 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `480 
f N "i2c_transfer_out" 2 726 ""
v L "address" 2 726 "int8" `488 
v L "wData" 2 726 "*int8" `489 
v L "wCount" 2 726 "int8" `490 
f B "i2c_transfer_out" 2 726 "int8(int8 address,*int8 wData,int8 wCount)" `487 
f N "i2c_transfer_out" 2 727 ""
v L "stream" 2 727 "int8" `492 
v L "address" 2 727 "int8" `493 
v L "wData" 2 727 "*int8" `494 
v L "wCount" 2 727 "int8" `495 
f B "i2c_transfer_out" 2 727 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `491 
f N "i2c_transfer_in" 2 728 ""
v L "address" 2 728 "int8" `497 
v L "rData" 2 728 "*int8" `498 
v L "rCount" 2 728 "int8" `499 
f B "i2c_transfer_in" 2 728 "int8(int8 address,*int8 rData,int8 rCount)" `496 
f N "i2c_transfer_in" 2 729 ""
v L "stream" 2 729 "int8" `501 
v L "address" 2 729 "int8" `502 
v L "rData" 2 729 "*int8" `503 
v L "rCount" 2 729 "int8" `504 
f B "i2c_transfer_in" 2 729 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `500  "#use spi() Prototypes:"
f N "spi_xfer" 2 732 ""
f B "spi_xfer" 2 732 "int8()" `505 
f N "spi_xfer" 2 733 ""
f G "spi_xfer" 2 733 "int16(int8 data)" `506 
f N "spi_xfer" 2 734 ""
f G "spi_xfer" 2 734 "int32(int8 data)" `506 
f N "spi_xfer" 2 735 ""
v L "data" 2 735 "int8" `507 
f B "spi_xfer" 2 735 "int8(int8 data)" `506 
f N "spi_xfer" 2 736 ""
v L "data" 2 736 "int16" `509 
f B "spi_xfer" 2 736 "int16(int16 data)" `508 
f N "spi_xfer" 2 737 ""
v L "data" 2 737 "int32" `511 
f B "spi_xfer" 2 737 "int32(int32 data)" `510 
f N "spi_xfer" 2 738 ""
v L "stream" 2 738 "int8" `513 
v L "data" 2 738 "int8" `514 
f B "spi_xfer" 2 738 "int8(int8 stream,int8 data)" `512 
f N "spi_xfer" 2 739 ""
v L "stream" 2 739 "int8" `516 
v L "data" 2 739 "int16" `517 
f B "spi_xfer" 2 739 "int16(int8 stream,int16 data)" `515 
f N "spi_xfer" 2 740 ""
v L "stream" 2 740 "int8" `519 
v L "data" 2 740 "int32" `520 
f B "spi_xfer" 2 740 "int32(int8 stream,int32 data)" `518 
f N "spi_xfer" 2 741 ""
v L "stream" 2 741 "int8" `522 
v L "data" 2 741 "int8" `523 
v L "bits" 2 741 "int8" `524 
f B "spi_xfer" 2 741 "int8(int8 stream,int8 data,int8 bits)" `521 
f N "spi_xfer" 2 742 ""
v L "stream" 2 742 "int8" `526 
v L "data" 2 742 "int16" `527 
v L "bits" 2 742 "int8" `528 
f B "spi_xfer" 2 742 "int16(int8 stream,int16 data,int8 bits)" `525 
f N "spi_xfer" 2 743 ""
v L "stream" 2 743 "int8" `530 
v L "data" 2 743 "int32" `531 
v L "bits" 2 743 "int8" `532 
f B "spi_xfer" 2 743 "int32(int8 stream,int32 data,int8 bits)" `529 
f N "spi_init" 2 744 ""
v L "baud" 2 744 "int32" `534 
f B "spi_init" 2 744 "void(int32 baud)" `533 
f N "spi_init" 2 745 ""
v L "stream" 2 745 "int8" `536 
v L "baud" 2 745 "int32" `537 
f B "spi_init" 2 745 "void(int8 stream,int32 baud)" `535 
f N "spi_speed" 2 746 ""
v L "baud" 2 746 "int32" `539 
f B "spi_speed" 2 746 "void(int32 baud)" `538 
f N "spi_speed" 2 747 ""
v L "stream" 2 747 "int8" `541 
v L "baud" 2 747 "int32" `542 
f B "spi_speed" 2 747 "void(int8 stream,int32 baud)" `540 
f N "spi_speed" 2 748 ""
v L "stream" 2 748 "int8" `544 
v L "baud" 2 748 "int32" `545 
v L "clock" 2 748 "int32" `546 
f B "spi_speed" 2 748 "void(int8 stream,int32 baud,int32 clock)" `543 
f N "spi_prewrite" 2 749 ""
v L "data" 2 749 "int8" `548 
f B "spi_prewrite" 2 749 "void(int8 data)" `547 
f N "spi_prewrite" 2 750 ""
v L "data" 2 750 "int16" `550 
f B "spi_prewrite" 2 750 "void(int16 data)" `549 
f N "spi_prewrite" 2 751 ""
v L "data" 2 751 "int32" `552 
f B "spi_prewrite" 2 751 "void(int32 data)" `551 
f N "spi_prewrite" 2 752 ""
v L "??65535" 2 752 "int8" `554 
v L "data" 2 752 "int8" `555 
f B "spi_prewrite" 2 752 "void(int8 ,int8 data)" `553 
f N "spi_prewrite" 2 753 ""
v L "??65535" 2 753 "int8" `557 
v L "data" 2 753 "int16" `558 
f B "spi_prewrite" 2 753 "void(int8 ,int16 data)" `556 
f N "spi_prewrite" 2 754 ""
v L "??65535" 2 754 "int8" `560 
v L "data" 2 754 "int32" `561 
f B "spi_prewrite" 2 754 "void(int8 ,int32 data)" `559 
f N "spi_xfer_in" 2 755 ""
f B "spi_xfer_in" 2 755 "int8()" `562 
f N "spi_xfer_in" 2 756 ""
f G "spi_xfer_in" 2 756 "int16(int8 bits)" `563 
f N "spi_xfer_in" 2 757 ""
f G "spi_xfer_in" 2 757 "int32(int8 bits)" `563 
f N "spi_xfer_in" 2 758 ""
v L "bits" 2 758 "int8" `564 
f B "spi_xfer_in" 2 758 "int8(int8 bits)" `563 
f N "spi_xfer_in" 2 759 ""
v L "bits" 2 759 "int8" `566 
f G "spi_xfer_in" 2 759 "int16(int8 bits,int8 bits)" `565 
f N "spi_xfer_in" 2 760 ""
v L "bits" 2 760 "int8" `566 
f G "spi_xfer_in" 2 760 "int32(int8 bits,int8 bits)" `565 
f N "spi_xfer_in" 2 761 ""
v L "stream" 2 761 "int8" `566 
v L "bits" 2 761 "int8" `567 
f B "spi_xfer_in" 2 761 "int8(int8 stream,int8 bits)" `565 
f N "spi_xfer_in" 2 762 ""
v L "stream" 2 762 "int8" `566 
v L "bits" 2 762 "int8" `570 
f G "spi_xfer_in" 2 762 "int16(int8 stream,int8 bits,int16 count)" `568 
f N "spi_xfer_in" 2 763 ""
v L "stream" 2 763 "int8" `566 
v L "bits" 2 763 "int8" `570 
f G "spi_xfer_in" 2 763 "int32(int8 stream,int8 bits,int16 count)" `568 
f N "spi_transfer" 2 764 ""
v L "wData" 2 764 "*int8" `569 
v L "rData" 2 764 "*int8" `570 
v L "count" 2 764 "int16" `571 
f B "spi_transfer" 2 764 "void(*int8 wData,*int8 rData,int16 count)" `568 
f N "spi_transfer" 2 765 ""
v L "stream" 2 765 "int8" `573 
v L "wData" 2 765 "*int8" `574 
v L "rData" 2 765 "*int8" `575 
v L "count" 2 765 "int16" `576 
f B "spi_transfer" 2 765 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `572 
f N "spi_transfer_write" 2 766 ""
v L "wData" 2 766 "*int8" `578 
v L "count" 2 766 "int16" `579 
f B "spi_transfer_write" 2 766 "void(*int8 wData,int16 count)" `577 
f N "spi_transfer_write" 2 767 ""
v L "stream" 2 767 "int8" `581 
v L "wData" 2 767 "*int8" `582 
v L "count" 2 767 "int16" `583 
f B "spi_transfer_write" 2 767 "void(int8 stream,*int8 wData,int16 count)" `580 
f N "spi_transfer_read" 2 768 ""
v L "rData" 2 768 "*int8" `585 
v L "count" 2 768 "int16" `586 
f B "spi_transfer_read" 2 768 "void(*int8 rData,int16 count)" `584 
f N "spi_transfer_read" 2 769 ""
v L "stream" 2 769 "int8" `588 
v L "rData" 2 769 "*int8" `589 
v L "count" 2 769 "int16" `590 
f B "spi_transfer_read" 2 769 "void(int8 stream,*int8 rData,int16 count)" `587  "#use rtos() Prototypes:"
f N "rtos_run" 2 772 ""
f B "rtos_run" 2 772 "void()" `591 
f N "rtos_yield" 2 773 ""
f B "rtos_yield" 2 773 "void()" `592 
f N "rtos_enable" 2 774 ""
v L "task" 2 774 "int8" `594 
f B "rtos_enable" 2 774 "void(int8 task)" `593 
f N "rtos_disable" 2 775 ""
v L "task" 2 775 "int8" `596 
f B "rtos_disable" 2 775 "void(int8 task)" `595 
f N "rtos_terminate" 2 776 ""
f B "rtos_terminate" 2 776 "void()" `597 
f N "rtos_await" 2 777 ""
v L "flag" 2 777 "int8" `599 
f B "rtos_await" 2 777 "void(int8 flag)" `598 
f N "rtos_wait" 2 778 ""
v L "sem" 2 778 "int8" `601 
f B "rtos_wait" 2 778 "void(int8 sem)" `600 
f N "rtos_signal" 2 779 ""
v L "sem" 2 779 "int8" `603 
f B "rtos_signal" 2 779 "void(int8 sem)" `602 
f N "rtos_msg_send" 2 780 ""
v L "task" 2 780 "int8" `605 
v L "msg" 2 780 "int8" `606 
f B "rtos_msg_send" 2 780 "void(int8 task,int8 msg)" `604 
f N "rtos_msg_read" 2 781 ""
f B "rtos_msg_read" 2 781 "int8()" `607 
f N "rtos_msg_poll" 2 782 ""
f B "rtos_msg_poll" 2 782 "int8()" `608 
f N "rtos_overrun" 2 783 ""
v L "task" 2 783 "int8" `610 
f B "rtos_overrun" 2 783 "int8(int8 task)" `609 
f N "rtos_stats" 2 784 ""
v L "task" 2 784 "int8" `612 
v L "stat" 2 784 "*int8" `613 
f B "rtos_stats" 2 784 "void(int8 task,*int8 stat)" `611  "#use timer() Prototypes:"
f N "get_ticks" 2 787 ""
f B "get_ticks" 2 787 "int8()" `614 
f N "get_ticks" 2 788 ""
f G "get_ticks" 2 788 "int16(int8 stream)" `615 
f N "get_ticks" 2 789 ""
f G "get_ticks" 2 789 "int32(int8 stream)" `615 
f N "get_ticks" 2 790 ""
v L "stream" 2 790 "int8" `616 
f B "get_ticks" 2 790 "int8(int8 stream)" `615 
f N "get_ticks" 2 791 ""
v L "stream" 2 791 "int8" `618 
f G "get_ticks" 2 791 "int16(int8 stream)" `617 
f N "get_ticks" 2 792 ""
v L "stream" 2 792 "int8" `618 
f G "get_ticks" 2 792 "int32(int8 stream)" `617 
f N "set_ticks" 2 793 ""
v L "value" 2 793 "int8" `618 
f B "set_ticks" 2 793 "void(int8 value)" `617 
f N "set_ticks" 2 794 ""
v L "value" 2 794 "int16" `620 
f B "set_ticks" 2 794 "void(int16 value)" `619 
f N "set_ticks" 2 795 ""
v L "value" 2 795 "int32" `622 
f B "set_ticks" 2 795 "void(int32 value)" `621 
f N "set_ticks" 2 796 ""
v L "stream" 2 796 "int8" `624 
v L "value" 2 796 "int8" `625 
f B "set_ticks" 2 796 "void(int8 stream,int8 value)" `623 
f N "set_ticks" 2 797 ""
v L "stream" 2 797 "int8" `627 
v L "value" 2 797 "int16" `628 
f B "set_ticks" 2 797 "void(int8 stream,int16 value)" `626 
f N "set_ticks" 2 798 ""
v L "stream" 2 798 "int8" `630 
v L "value" 2 798 "int32" `631 
f B "set_ticks" 2 798 "void(int8 stream,int32 value)" `629  "#use pwm() Prototypes:"
f N "pwm_on" 2 801 ""
f B "pwm_on" 2 801 "void()" `632 
f N "pwm_on" 2 802 ""
v L "stream" 2 802 "int8" `634 
f B "pwm_on" 2 802 "void(int8 stream)" `633 
f N "pwm_off" 2 803 ""
f B "pwm_off" 2 803 "void()" `635 
f N "pwm_off" 2 804 ""
v L "stream" 2 804 "int8" `637 
f B "pwm_off" 2 804 "void(int8 stream)" `636 
f N "pwm_set_duty" 2 805 ""
v L "duty" 2 805 "int16" `639 
f B "pwm_set_duty" 2 805 "void(int16 duty)" `638 
f N "pwm_set_duty" 2 806 ""
v L "stream" 2 806 "int8" `641 
v L "duty" 2 806 "int16" `642 
f B "pwm_set_duty" 2 806 "void(int8 stream,int16 duty)" `640 
f N "pwm_set_duty_percent" 2 807 ""
v L "percent" 2 807 "int16" `644 
f B "pwm_set_duty_percent" 2 807 "void(int16 percent)" `643 
f N "pwm_set_duty_percent" 2 808 ""
v L "stream" 2 808 "int8" `646 
v L "percent" 2 808 "int16" `647 
f B "pwm_set_duty_percent" 2 808 "void(int8 stream,int16 percent)" `645 
f N "pwm_set_frequency" 2 809 ""
v L "frequency" 2 809 "int32" `649 
f B "pwm_set_frequency" 2 809 "void(int32 frequency)" `648 
f N "pwm_set_frequency" 2 810 ""
v L "stream" 2 810 "int8" `651 
v L "frequency" 2 810 "int32" `652 
f B "pwm_set_frequency" 2 810 "void(int8 stream,int32 frequency)" `650 
f N "pwm_get_duty_period" 2 811 ""
f B "pwm_get_duty_period" 2 811 "int16()" `653 
f N "pwm_get_duty_period" 2 812 ""
v L "stream" 2 812 "int8" `655 
f B "pwm_get_duty_period" 2 812 "int16(int8 stream)" `654  "#use capture() Prototypes:"
f N "get_capture_time" 2 815 ""
f B "get_capture_time" 2 815 "int16()" `656 
f N "get_capture_time" 2 816 ""
v L "stream" 2 816 "int8" `658 
f B "get_capture_time" 2 816 "int16(int8 stream)" `657 
f N "get_capture_event" 2 817 ""
f B "get_capture_event" 2 817 "int8()" `659 
f N "get_capture_event" 2 818 ""
v L "stream" 2 818 "int8" `661 
f B "get_capture_event" 2 818 "int8(int8 stream)" `660  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 831 ""
v L "address" 2 831 "int16" `663 
f B "goto_address" 2 831 "void(int16 address)" `662 
f N "label_address" 2 832 ""
v L "label" 2 832 "int16" `665 
f B "label_address" 2 832 "int16(int16 label)" `664  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 835 ""
v L "address" 2 835 "int16" `667 
v L "dataptr" 2 835 "*int8" `668 
v L "count" 2 835 "int16" `669 
f B "read_program_memory" 2 835 "void(int16 address,*int8 dataptr,int16 count)" `666 
f N "read_program_eeprom" 2 836 ""
v L "address" 2 836 "int16" `671 
f B "read_program_eeprom" 2 836 "int16(int16 address)" `670 
f N "read_configuration_memory" 2 837 ""
v L "dataptr" 2 837 "*int8" `673 
v L "count" 2 837 "int8" `674 
f B "read_configuration_memory" 2 837 "void(*int8 dataptr,int8 count)" `672 
f N "read_configuration_memory" 2 838 ""
v L "offset" 2 838 "int8" `676 
v L "dataptr" 2 838 "*int8" `677 
v L "count" 2 838 "int8" `678 
f B "read_configuration_memory" 2 838 "void(int8 offset,*int8 dataptr,int8 count)" `675 
f N "read_configuration_memory" 2 839 ""
v L "dataptr" 2 839 "*int8" `673 
v L "count" 2 839 "int8" `681 
f G "read_configuration_memory" 2 839 "void(*int8 dataptr,int8 count,int16 count)" `679 
f N "read_configuration_memory" 2 840 ""
v L "offset" 2 840 "int8" `676 
v L "dataptr" 2 840 "*int8" `677 
v L "count" 2 840 "int8" `682 
f G "read_configuration_memory" 2 840 "void(int8 offset,*int8 dataptr,int8 count)" `679  "Program Memory Write Prototypes:"
f N "write_program_memory" 2 843 ""
v L "address" 2 843 "int16" `680 
v L "dataptr" 2 843 "*int8" `681 
v L "count" 2 843 "int16" `682 
f B "write_program_memory" 2 843 "void(int16 address,*int8 dataptr,int16 count)" `679 
f N "write_program_eeprom" 2 844 ""
v L "address" 2 844 "int16" `684 
v L "data" 2 844 "int16" `685 
f B "write_program_eeprom" 2 844 "void(int16 address,int16 data)" `683 
f N "write_configuration_memory" 2 845 ""
v L "dataptr" 2 845 "*int8" `687 
v L "count" 2 845 "int8" `688 
f B "write_configuration_memory" 2 845 "void(*int8 dataptr,int8 count)" `686 
f N "write_configuration_memory" 2 846 ""
v L "offset" 2 846 "int8" `690 
v L "dataptr" 2 846 "*int8" `691 
v L "count" 2 846 "int8" `692 
f B "write_configuration_memory" 2 846 "void(int8 offset,*int8 dataptr,int8 count)" `689 
f N "write_configuration_memory" 2 847 ""
v L "dataptr" 2 847 "*int8" `687 
v L "count" 2 847 "int8" `695 
f G "write_configuration_memory" 2 847 "void(*int8 dataptr,int8 count,int8 address,int8 value)" `693 
f N "write_configuration_memory" 2 848 ""
v L "offset" 2 848 "int8" `690 
v L "dataptr" 2 848 "*int8" `691 
v L "count" 2 848 "int8" `696 
f G "write_configuration_memory" 2 848 "void(int8 offset,*int8 dataptr,int8 count,int8 value)" `693  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 855 "unsigned int8"
f N "read_eeprom" 2 858 ""
v L "address" 2 858 "int8" `694 
f B "read_eeprom" 2 858 "int8(int8 address,*int8 dataptr,int8 count,int8 value)" `693 
f N "write_eeprom" 2 859 ""
v L "address" 2 859 "int8" `696 
v L "value" 2 859 "int8" `697 
f B "write_eeprom" 2 859 "void(int8 address,int8 value)" `695  "#use touchpad() Prototypes:"
f N "touchpad_state" 2 862 ""
v L "state" 2 862 "int8" `699 
f B "touchpad_state" 2 862 "void(int8 state)" `698 
f N "touchpad_getc" 2 863 ""
f B "touchpad_getc" 2 863 "int8()" `700 
f N "touchpad_hit" 2 864 ""
f B "touchpad_hit" 2 864 "int8()" `701  "INT"
c L "touchpad_hit" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 870 ""
v L "interrupt" 2 870 "int32" `703 
f B "enable_interrupts" 2 870 "void(int32 interrupt)" `702 
f N "disable_interrupts" 2 871 ""
v L "interrupt" 2 871 "int32" `705 
f B "disable_interrupts" 2 871 "void(int32 interrupt)" `704 
f N "clear_interrupt" 2 872 ""
v L "interrupt" 2 872 "int32" `707 
f B "clear_interrupt" 2 872 "void(int32 interrupt)" `706 
f N "interrupt_active" 2 873 ""
v L "interrupt" 2 873 "int32" `709 
f B "interrupt_active" 2 873 "int8(int32 interrupt)" `708 
f N "interrupt_enabled" 2 874 ""
v L "interrupt" 2 874 "int32" `711 
f B "interrupt_enabled" 2 874 "int8(int32 interrupt)" `710 
f N "ext_int_edge" 2 875 ""
v L "source" 2 875 "int8" `713 
v L "edge" 2 875 "int8" `714 
f B "ext_int_edge" 2 875 "void(int8 source,int8 edge)" `712 
f N "jump_to_isr" 2 876 ""
v L "address" 2 876 "int16" `716 
f B "jump_to_isr" 2 876 "void(int16 address)" `715  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 878 "0x40"
d G "H_TO_L" 2 879 "0"
d G "GLOBAL" 2 881 "0x0BC0"
d G "PERIPH" 2 882 "0x0B40"
d G "INT_EXT_L2H" 2 883 "0x50000B10"
d G "INT_EXT_H2L" 2 884 "0x60000B10"
d G "INT_EXT" 2 885 "0x300B10"
d G "INT_TIMER0" 2 886 "0x300B20"
d G "INT_TIMER1" 2 887 "0x309101"
d G "INT_TIMER2" 2 888 "0x309102"
d G "INT_CCP1" 2 889 "0x309104"
d G "INT_SSP" 2 890 "0x309108"
d G "INT_TBE" 2 891 "0x309110"
d G "INT_RDA" 2 892 "0x309120"
d G "INT_AD" 2 893 "0x309140"
d G "INT_TIMER1_GATE" 2 894 "0x309180"
d G "INT_BUSCOL" 2 895 "0x309208"
d G "INT_EEPROM" 2 896 "0x309210"
d G "INT_COMP" 2 897 "0x309220"
d G "INT_COMP2" 2 898 "0x309240"
d G "INT_OSC_FAIL" 2 899 "0x309280"
d G "INT_TIMER4" 2 900 "0x309302"
d G "INT_TIMER6" 2 901 "0x309308"
d G "INT_CCP3" 2 902 "0x309310"
d G "INT_CCP4" 2 903 "0x309320"
d G "INT_CCP2" 2 904 "0x309201"
d G "INT_SSP2" 2 905 "0x309401"
d G "INT_BCL2" 2 906 "0x309402"
d G "INT_IOC" 2 907 "0x3FFF0B08"
d G "INT_IOC_B0" 2 908 "0x31010B08"
d G "INT_IOC_B0_L2H" 2 909 "0x11010B08"
d G "INT_IOC_B0_H2L" 2 910 "0x21010B08"
d G "INT_IOC_B1" 2 911 "0x31020B08"
d G "INT_IOC_B1_L2H" 2 912 "0x11020B08"
d G "INT_IOC_B1_H2L" 2 913 "0x21020B08"
d G "INT_IOC_B2" 2 914 "0x31040B08"
d G "INT_IOC_B2_L2H" 2 915 "0x11040B08"
d G "INT_IOC_B2_H2L" 2 916 "0x21040B08"
d G "INT_IOC_B3" 2 917 "0x31080B08"
d G "INT_IOC_B3_L2H" 2 918 "0x11080B08"
d G "INT_IOC_B3_H2L" 2 919 "0x21080B08"
d G "INT_IOC_B4" 2 920 "0x31100B08"
d G "INT_IOC_B4_L2H" 2 921 "0x11100B08"
d G "INT_IOC_B4_H2L" 2 922 "0x21100B08"
d G "INT_IOC_B5" 2 923 "0x31200B08"
d G "INT_IOC_B5_L2H" 2 924 "0x11200B08"
d G "INT_IOC_B5_H2L" 2 925 "0x21200B08"
d G "INT_IOC_B6" 2 926 "0x31400B08"
d G "INT_IOC_B6_L2H" 2 927 "0x11400B08"
d G "INT_IOC_B6_H2L" 2 928 "0x21400B08"
d G "INT_IOC_B7" 2 929 "0x31800B08"
d G "INT_IOC_B7_L2H" 2 930 "0x11800B08"
d G "INT_IOC_B7_H2L" 2 931 "0x21800B08"
d G "INT_RB" 2 938 "0x30FF0B08"
d G "INT_RB0" 2 939 "0x31010B08"
d G "INT_RB0_L2H" 2 940 "0x11010B08"
d G "INT_RB0_H2L" 2 941 "0x21010B08"
d G "INT_RB1" 2 942 "0x31020B08"
d G "INT_RB1_L2H" 2 943 "0x11020B08"
d G "INT_RB1_H2L" 2 944 "0x21020B08"
d G "INT_RB2" 2 945 "0x31040B08"
d G "INT_RB2_L2H" 2 946 "0x11040B08"
d G "INT_RB2_H2L" 2 947 "0x21040B08"
d G "INT_RB3" 2 948 "0x31080B08"
d G "INT_RB3_L2H" 2 949 "0x11080B08"
d G "INT_RB3_H2L" 2 950 "0x21080B08"
d G "INT_RB4" 2 951 "0x31100B08"
d G "INT_RB4_L2H" 2 952 "0x11100B08"
d G "INT_RB4_H2L" 2 953 "0x21100B08"
d G "INT_RB5" 2 954 "0x31200B08"
d G "INT_RB5_L2H" 2 955 "0x11200B08"
d G "INT_RB5_H2L" 2 956 "0x21200B08"
d G "INT_RB6" 2 957 "0x31400B08"
d G "INT_RB6_L2H" 2 958 "0x11400B08"
d G "INT_RB6_H2L" 2 959 "0x21400B08"
d G "INT_RB7" 2 960 "0x31800B08"
d G "INT_RB7_L2H" 2 961 "0x11800B08"
d G "INT_RB7_H2L" 2 962 "0x21800B08"
C L "jump_to_isr" 1 3 1 "FUNCTION"
F N "main" 0 3 ""
F G "main" 0 4 "void()" `717 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
